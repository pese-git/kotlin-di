/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.kotlin.di.example

import kotlinx.coroutines.flow.*
import kotlinx.coroutines.runBlocking
import org.kotlin.di.DiContainer


fun main(args: Array<String>)= runBlocking {
    val container = DiContainer()
    container.bind<String>(String::class).toValue("279f7923kf23fs")
    container.bind<ApiClient>(ApiClient::class).toValue(ApiClientMock())
    container.bind<DataRepository>(DataRepository::class).toFactory2<String, ApiClient> { it1, it2 ->
        NetworkDataRepository(
                token = it1,
                apiClient = it2
        )
    }

    val dataRepository = container.resolve<DataRepository>(DataRepository::class)

    dataRepository.getData().collect {
        println(it)
    }
}

interface DataRepository {
    fun getData(): Flow<String>
}

class NetworkDataRepository(
        private val token: String,
        private val apiClient: ApiClient
): DataRepository {

    override fun getData(): Flow<String> {
        return apiClient.sendRequest(
                url = "www.google.com",
                token = token,
                requestBody = mapOf("type" to "string")
        )
    }
}



interface ApiClient {
    fun sendRequest(url: String, token: String, requestBody: Map<String, Any>): Flow<String>
}

class ApiClientMock: ApiClient {
    override fun sendRequest(url: String, token: String, requestBody: Map<String, Any>): Flow<String> {
        return flowOf("Answer: $url $token $requestBody")
    }
}